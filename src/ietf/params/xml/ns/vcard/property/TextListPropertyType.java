//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.04.12 at 11:58:52 AM EDT
//
package ietf.params.xml.ns.vcard.property;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * Java class for TextListPropertyType complex type.
 * <p/>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * <p/>
 * <
 * pre> &lt;complexType name="TextListPropertyType"> &lt;complexContent>
 * &lt;extension base="{urn:ietf:params:xml:ns:vcard-4.0}BasePropertyType">
 * &lt;sequence> &lt;element ref="{urn:ietf:params:xml:ns:vcard-4.0}text"
 * maxOccurs="unbounded"/> &lt;/sequence> &lt;/extension> &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * <p/>
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TextListPropertyType", propOrder = {
  "text"
})
public class TextListPropertyType extends BasePropertyType {

  @XmlElement(required = true)
  protected List<String> text;

  public TextListPropertyType() {
  }

  /**
   * Constructor that automatically adds the text entry.
   * <p/>
   * @param textEntry
   */
  public TextListPropertyType(String textEntry) {
    text = new ArrayList<String>();
    text.add(textEntry);
  }

  /**
   * Gets the value of the text property.
   * <p/>
   * This accessor method returns a reference to the live list, not a snapshot.
   * Therefore any modification you make to the returned list will be present
   * inside the JAXB object. This is why there is not a
   * <CODE>set</CODE> method for the text property.
   * <p/>
   * For example, to add a new item, do as follows:
   * <pre>
   *    getText().add(newItem);
   * </pre>
   * <p/>
   *
   * Objects of the following type(s) are allowed in the list {@link String }
   *
   *
   */
  public List<String> getText() {
    if (text == null) {
      text = new ArrayList<String>();
    }
    return this.text;
  }

  public boolean isSetText() {
    return ((this.text != null) && (!this.text.isEmpty()));
  }

  public void unsetText() {
    this.text = null;
  }

  /**
   * Most TextListPropertyType only contain one entry. This gets the first
   * entry.
   * <p/>
   * @return the first entry of the text list
   */
  public String getEntry() {
    if (!getText().isEmpty()) {
      return text.get(0);
    }
    return null;
  }

  /**
   * Most TextListPropertyType only contain one entry. This gets the first
   * entry.
   * <p/>
   * This method ignores duplicates and null entries.
   * <p/>
   * @param textEntry the text entry
   */
  public void setEntry(String textEntry) {
    if (!getText().contains(textEntry) && textEntry != null && !textEntry.isEmpty()) {
      text.add(textEntry);
    }
  }

  @Override
  public int hashCode() {
    int hash = 7;
    hash = 71 * hash + Objects.hashCode(this.text);
    return hash;
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == null) {
      return false;
    }
    if (getClass() != obj.getClass()) {
      return false;
    }
    final TextListPropertyType other = (TextListPropertyType) obj;
    if (!Objects.equals(this.text, other.text)) {
      return false;
    }
    return true;
  }

  @Override
  public String toString() {
    return "TextListPropertyType{" + "text=" + text + '}';
  }
}
